class Solution {
public:
    // Convert a number to base-k string
    std::string toBase(long long number, int base) {
        std::string representation;
        while (number > 0) {
            int digit = number % base;
            representation = static_cast<char>('0' + digit) + representation;
            number /= base;
        }
        return representation.empty() ? "0" : representation;
    }

    // Check if a string is a palindrome
    bool isPalindrome(const std::string& s) {
        int i = 0, j = s.size() - 1;
        while (i < j) {
            if (s[i++] != s[j--]) return false;
        }
        return true;
    }

    // Main function
    long long kMirror(int base, int count) {
        long long sum = 0;
        for (int length = 1; count > 0; ++length) {
            int start = static_cast<int>(std::pow(10, (length - 1) / 2));
            int end = static_cast<int>(std::pow(10, (length + 1) / 2));

            for (int i = start; i < end; i++) {
                long long palindrome = i;
                for (int j = (length % 2 == 0) ? i : i / 10; j > 0; j /= 10) {
                    palindrome = palindrome * 10 + j % 10;
                }

                std::string baseRep = toBase(palindrome, base);
                if (isPalindrome(baseRep)) {
                    sum += palindrome;
                    if (--count == 0) return sum;
                }
            }
        }
        return sum;
    }
};
